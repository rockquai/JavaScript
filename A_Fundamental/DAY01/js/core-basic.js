// 엄격 모드
'use strict';

/**
 * --------------------------------
 * Javascript core
 * --------------------------------
 * 절차 지향 방식으로 학습
 * 상수 : 변화 하지 않는 값
 * 변수 : 변경되는 값. 
 * --------------------------------
 */

// 초기 변수 선언 
// 변수 선언 방법1
// var x, y, z;

// 변수 선언 방법2
var x;
var y;
var z;

// 변수 선언 방법3 : 각각 변수 앞에 var 선언
// var x = 10;

// 실행 구문1
x = 10;
y = x + 10; 
z = y * y - 100;

console.log('x의 값은', x); // 10
console.log('y의 값은', y); // 20
console.log('z의 값은', z); // 300

// 실행 구문2
// 변수의 상태가 변경되었다.
x = -19;
y = x + 10; 

console.log('x의 값은', x); // -19
console.log('y의 값은', y); // -9
console.log('z의 값은', z); // 300


/**
 * --------------------------------
 * var 키워드를 한번만 사용하는 코딩 패턴(방법)
 * var singleton pattern
 * --------------------------------
 */

var a=1, b=2, c=9;

// a = 1;
// b = 2;
// c = 9;

var man='남자', 
	woman='여자', 
	people='사람들';

// man = '남자';
// woman='여자';
// people='사람들';

/**
 * ----------------------------------------------------------------------
 * 변수 이름 작성 규칙
 * 0. 명시적으로 작성한다.
 * 1. 이름 맨 앞에 숫자가 오면 안된다. (하지만 맨 앞만 아니면 괜찮다)
 * 2. 이름 사이에 공백(띄어쓰기)은 허용하지 않는다. 
 * 3. 이름 작성시, 특수문자는 $, _만 허용한다.
 * 4. 변수 이름은 모두 대문자를 사용해서 작성하지 않는다. 
 * ㄴ> 오류를 발생하는 것은 아니지만, 관례적으로 이름이 모두 대문자일 경우, 상수로 인식한다.
 * ----------------------------------------------------------------------
 */

// 1. 이름 맨 앞에 숫자가 오면 안된다. 
// var 9tree; // Uncaught SyntaxError

// 하지만 맨 앞만 아니면 괜찮다
var tree9;

// 2. 이름 사이에 공백(띄어쓰기)은 허용하지 않는다. 
// var my name; // Uncaught SyntaxError

// 이름 사이는 공백 대신에 밑줄을 사용한다.
var my_name;

// 3. 이름 작성시, 특수문자는 $, _만 허용한다.
// var ^^#@_name;


// 4. 변수 이름은 모두 대문자를 사용해서 작성하지 않는다. 
// 대문자를 변수 이름에 사용하는 경우는
// 카멜 케이스(camelCase) 표기법을 따르는 경우가 많다.
// var SMART_PHONE;
var smartPhone;

// 위 변수는 변수(변하는 수)가 아닌 상수를
// 나타내는 식별법이다.
// const ==>  상수를 나타내며
// 런타임 중에 상수 변경할 수 없다.
// const STORAGE;


/**
 * --------------------------------
 * 자바스크립트는 문장은 점으로 연결되어 이루어진다.
 * --------------------------------
 */

// 예
// 친구가 커피를 선물하다. 
// 친구.선물하다(커피);
// 친구 = 객체(=오브젝트), 선물하다 = 메서드, (커피) = 전달인자
// 객체.동작(전달인자) === 객체.메서드(전달인자=아규먼트)
